/*
AI_Player

	boolean isTurn
	int takeTurn(vector[][]) - returns an int of the selected column - set !isTurn
		- will call other methods such as alpha-beta pruning methods
*/


/*
create tree for game state - tree is rebuilt after each move
tree is generated by placing a tile in all possible slots

maybe may tree all nodes just ints - indicating the number of possible winning paths
  node(int depth, vector game_board, ....), pass the game_board down through the tree.. USE THE SAME GAME_STATE VECTOR


every node will have n children
make move in vector then revert moves as the tree is traversed back upwards

each layer of depth does the same thing
board_state 4 x 4 board
  - 4 game states - 1 state for each tile selected - (turn 1)
    - 4 * 4 game states - 4 options for each possible choices from turn 1 - (turn 2)
      - 4 * 4 * 4 game states
        - etc

must decide how deep

a < b - no pruning

heuristic evalution function - count the number of possible winning paths ???

*/


/*
max_value()

min_value()

*/
